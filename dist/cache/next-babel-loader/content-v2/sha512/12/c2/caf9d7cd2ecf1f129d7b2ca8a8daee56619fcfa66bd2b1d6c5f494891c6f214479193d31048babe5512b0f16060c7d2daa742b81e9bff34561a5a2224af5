{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\kna.sugihara\\\\Documents\\\\ex_next\\\\ex-next\\\\src\\\\component\\\\atoms\\\\Button\\\\index.js\";\n\n/**\r\n * atom button\r\n */\nimport React, { memo, useMemo, useRef } from 'react';\nimport './index.scss';\nconst ANIME_DURATION = 280;\n\nconst Button = props => {\n  const btnRef = useRef(null);\n\n  const handleClick = e => {\n    e.stopPropagation();\n\n    if (props.params) {\n      props.onClick(props.params);\n    } else if (props.onClick) props.onClick(e);\n\n    if (props.getRef) {\n      props.getRef(btnRef);\n    }\n  };\n\n  const className = useMemo(() => {\n    const arr = [];\n    props.disabled && arr.push('disabled');\n    props.round && arr.push('round');\n    props.icon && arr.push('icon');\n    props.wrap && arr.push('wrap');\n    props.color && arr.push(props.color);\n    props.size && arr.push(props.size);\n    return arr.reduce((cn, type) => {\n      cn += ` button--${type}`;\n      return cn;\n    }, 'button');\n  }, [props.color, props.size, props.disabled, props.round, props.icon, props.wrap]);\n  const customClass = useMemo(() => {\n    if (props.classNames) return ` ${props.classNames}`;\n    return '';\n  }, [props.classNames]);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    className: `${className}${customClass}`,\n    disabled: props.disabled,\n    onClick: handleClick,\n    style: props.styleParams,\n    ref: btnRef,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Button;","map":{"version":3,"sources":["C:/Users/kna.sugihara/Documents/ex_next/ex-next/src/component/atoms/Button/index.js"],"names":["React","memo","useMemo","useRef","ANIME_DURATION","Button","props","btnRef","handleClick","e","stopPropagation","params","onClick","getRef","className","arr","disabled","push","round","icon","wrap","color","size","reduce","cn","type","customClass","classNames","styleParams","children"],"mappings":";;;AAAA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,OAAtB,EAA+BC,MAA/B,QAA6C,OAA7C;AAEA,OAAO,cAAP;AAEA,MAAMC,cAAc,GAAG,GAAvB;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AACtB,QAAMC,MAAM,GAAGJ,MAAM,CAAC,IAAD,CAArB;;AAEA,QAAMK,WAAW,GAAIC,CAAD,IAAO;AACzBA,IAAAA,CAAC,CAACC,eAAF;;AAEA,QAAIJ,KAAK,CAACK,MAAV,EAAkB;AAChBL,MAAAA,KAAK,CAACM,OAAN,CAAcN,KAAK,CAACK,MAApB;AACD,KAFD,MAEO,IAAIL,KAAK,CAACM,OAAV,EAAmBN,KAAK,CAACM,OAAN,CAAcH,CAAd;;AAE1B,QAAIH,KAAK,CAACO,MAAV,EAAkB;AAChBP,MAAAA,KAAK,CAACO,MAAN,CAAaN,MAAb;AACD;AACF,GAVD;;AAYA,QAAMO,SAAS,GAAGZ,OAAO,CAAC,MAAM;AAC9B,UAAMa,GAAG,GAAG,EAAZ;AACAT,IAAAA,KAAK,CAACU,QAAN,IAAkBD,GAAG,CAACE,IAAJ,CAAS,UAAT,CAAlB;AACAX,IAAAA,KAAK,CAACY,KAAN,IAAeH,GAAG,CAACE,IAAJ,CAAS,OAAT,CAAf;AACAX,IAAAA,KAAK,CAACa,IAAN,IAAcJ,GAAG,CAACE,IAAJ,CAAS,MAAT,CAAd;AACAX,IAAAA,KAAK,CAACc,IAAN,IAAcL,GAAG,CAACE,IAAJ,CAAS,MAAT,CAAd;AAEAX,IAAAA,KAAK,CAACe,KAAN,IAAeN,GAAG,CAACE,IAAJ,CAASX,KAAK,CAACe,KAAf,CAAf;AAEAf,IAAAA,KAAK,CAACgB,IAAN,IAAcP,GAAG,CAACE,IAAJ,CAASX,KAAK,CAACgB,IAAf,CAAd;AAEA,WAAOP,GAAG,CAACQ,MAAJ,CAAW,CAACC,EAAD,EAAKC,IAAL,KAAc;AAC9BD,MAAAA,EAAE,IAAK,YAAYC,IAAM,EAAzB;AAEA,aAAOD,EAAP;AACD,KAJM,EAIJ,QAJI,CAAP;AAKD,GAhBwB,EAgBtB,CAAElB,KAAK,CAACe,KAAR,EAAef,KAAK,CAACgB,IAArB,EAA2BhB,KAAK,CAACU,QAAjC,EAA2CV,KAAK,CAACY,KAAjD,EAAwDZ,KAAK,CAACa,IAA9D,EAAoEb,KAAK,CAACc,IAA1E,CAhBsB,CAAzB;AAkBA,QAAMM,WAAW,GAAGxB,OAAO,CAAC,MAAM;AAChC,QAAII,KAAK,CAACqB,UAAV,EAAsB,OAAQ,IAAGrB,KAAK,CAACqB,UAAW,EAA5B;AACtB,WAAO,EAAP;AACD,GAH0B,EAGxB,CAACrB,KAAK,CAACqB,UAAP,CAHwB,CAA3B;AAKA,sBACE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAI,GAAEb,SAAU,GAAEY,WAAY,EAFzC;AAGE,IAAA,QAAQ,EAAGpB,KAAK,CAACU,QAHnB;AAIE,IAAA,OAAO,EAAGR,WAJZ;AAKE,IAAA,KAAK,EAAGF,KAAK,CAACsB,WALhB;AAME,IAAA,GAAG,EAAGrB,MANR;AAAA,cAQID,KAAK,CAACuB;AARV;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAlDD;;AAoDA,eAAexB,MAAf","sourcesContent":["/**\r\n * atom button\r\n */\r\n\r\nimport React, { memo, useMemo, useRef } from 'react'\r\n\r\nimport './index.scss'\r\n\r\nconst ANIME_DURATION = 280\r\n\r\nconst Button = props => {\r\n  const btnRef = useRef(null)\r\n\r\n  const handleClick = (e) => {\r\n    e.stopPropagation()\r\n\r\n    if (props.params) {\r\n      props.onClick(props.params)\r\n    } else if (props.onClick) props.onClick(e)\r\n\r\n    if (props.getRef) {\r\n      props.getRef(btnRef)\r\n    }\r\n  }\r\n\r\n  const className = useMemo(() => {\r\n    const arr = []\r\n    props.disabled && arr.push('disabled')\r\n    props.round && arr.push('round')\r\n    props.icon && arr.push('icon')\r\n    props.wrap && arr.push('wrap')\r\n\r\n    props.color && arr.push(props.color)\r\n\r\n    props.size && arr.push(props.size)\r\n\r\n    return arr.reduce((cn, type) => {\r\n      cn += ` button--${ type }`\r\n\r\n      return cn\r\n    }, 'button')\r\n  }, [ props.color, props.size, props.disabled, props.round, props.icon, props.wrap ])\r\n\r\n  const customClass = useMemo(() => {\r\n    if (props.classNames) return ` ${props.classNames}`\r\n    return ''\r\n  }, [props.classNames])\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={ `${className}${customClass}` }\r\n      disabled={ props.disabled }\r\n      onClick={ handleClick }\r\n      style={ props.styleParams }\r\n      ref={ btnRef }\r\n    >\r\n      { props.children }\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Button\r\n"]},"metadata":{},"sourceType":"module"}