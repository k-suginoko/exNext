{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\r\n * atom button\r\n */\nimport React, { memo, useMemo, useRef } from 'react';\nimport './index.scss';\nvar ANIME_DURATION = 280;\n\nvar Button = function Button(props) {\n  var btnRef = useRef(null);\n\n  var handleClick = function handleClick(e) {\n    e.stopPropagation();\n\n    if (props.params) {\n      props.onClick(props.params);\n    } else if (props.onClick) props.onClick(e);\n\n    if (props.getRef) {\n      props.getRef(btnRef);\n    }\n  };\n\n  var className = useMemo(function () {\n    var arr = [];\n    props.disabled && arr.push('disabled');\n    props.round && arr.push('round');\n    props.icon && arr.push('icon');\n    props.wrap && arr.push('wrap');\n    props.color && arr.push(props.color);\n    props.size && arr.push(props.size);\n    return arr.reduce(function (cn, type) {\n      cn += \" button--\".concat(type);\n      return cn;\n    }, 'button');\n  }, [props.color, props.size, props.disabled, props.round, props.icon, props.wrap]);\n  var customClass = useMemo(function () {\n    if (props.classNames) return \" \".concat(props.classNames);\n    return '';\n  }, [props.classNames]);\n  return /*#__PURE__*/_jsx(\"button\", {\n    type: \"button\",\n    className: \"\".concat(className).concat(customClass),\n    disabled: props.disabled,\n    onClick: handleClick,\n    style: props.styleParams,\n    ref: btnRef,\n    children: props.children\n  });\n};\n\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}